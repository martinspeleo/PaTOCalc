# from django.shortcuts import render
import os
import sys
from django.conf import settings
from reportlab.pdfgen import canvas
from django.http import HttpResponse
from django.shortcuts import get_object_or_404
from django.contrib.auth.decorators import login_required
import json
from reportlab.rl_config import defaultPageSize

from calc.models import FormInstance
from  reportlab.lib.pagesizes import letter, A4


@login_required
def make_pdf(request, fi_pk):
    fi = get_object_or_404(FormInstance, pk=fi_pk)
    form_data = fi.get_data()
    # Create the HttpResponse object with the appropriate PDF headers.
    response = HttpResponse(content_type='application/pdf')
    filename = str(fi) + '.pdf'
    response['Content-Disposition'] = 'attachment; filename="' + filename + '"'

    # Create the PDF object, using the response object as its "file."
    p = canvas.Canvas(response, pagesize=letter)

    # Draw things on the PDF. Here's where the PDF generation happens.
    # See the ReportLab documentation for the full list of functionality.
    logo = os.path.join(settings.STATICFILES_DIRS[0], "img/logo.jpg")
    PAGE_HEIGHT = defaultPageSize[1];
    PAGE_WIDTH = defaultPageSize[0]

    # logo
    p.saveState()
    p.drawImage(logo, 35, PAGE_HEIGHT - 150, width=70, height=70, mask='auto')
    p.restoreState()

    # import title
    p.saveState()
    p.setFont('Helvetica', 20)
    p.drawString(PAGE_WIDTH - 200, PAGE_HEIGHT - 140, 'PaTOCalc Report ')
    p.restoreState()

    # title red line
    p.saveState()
    p.setStrokeColorRGB(0.714, 0.016, 0.09)
    p.setLineWidth(2)
    p.line(35, PAGE_HEIGHT - 150, PAGE_WIDTH - 35, PAGE_HEIGHT - 150)
    p.restoreState()

    # Patient Data
    patient = json.loads(fi.patient_data)
    p.saveState()
    p.setFont('Helvetica', 10)
    p.drawString(35, PAGE_HEIGHT - 175, 'Patient Name : {0}'.format(patient['name']))
    p.drawString(35, PAGE_HEIGHT - 190, 'Patient Age : {0}'.format(patient['age']))
    p.drawString(35, PAGE_HEIGHT - 205, 'Patient Sex : {0}'.format(patient['sex']))
    p.restoreState()

    # Form Data
    p.saveState()
    p.setFont('Helvetica', 10)
    p.drawString(35, PAGE_HEIGHT - 250, 'Form title : {0}'.format(fi.form_generator.title))
    p.drawString(35, PAGE_HEIGHT - 265, 'Calculation date : {0}'.format(fi.created_date.strftime('%Y-%m-%d %H:%M:%S')))
    p.drawString(35, PAGE_HEIGHT - 280, 'Generated by : {0} {1}'.format(fi.author.first_name, fi.author.last_name))
    p.restoreState()

    import ast
    fields = fi.get_data()

    # Form Inputs
    p.saveState()
    p.setFont('Helvetica', 10)
    y = PAGE_HEIGHT - 330
    for field in ast.literal_eval(fi.form_generator.html) :
        if field['type'] == 'num':
            p.drawString(35, y, '{0}: {1}'.format(field['label'], fields[field['name']]))
            y = y - 12
    p.restoreState()

    # Form Outpus
    mycode = '# This is a code checking example \n'


    for field in ast.literal_eval(fi.form_generator.html) :
        if field['type'] == 'num':
            mycode += '{0} = {1} \n'.format(field['label'], fields[field['name']])
	
    mycode += '\n\n# Your code \n'
    mycode += fi.form_generator.code
    
    try:
        from cStringIO import StringIO
        old_stdout = sys.stdout
        redirected_output = sys.stdout = StringIO()
        exec (mycode)
        sys.stdout = old_stdout
        output = '{0}'.format(redirected_output.getvalue())
    except Exception as e:
        output = 'An error was found: {0}'.format(e)
    
    
    # Form Output
    p.saveState()
    p.setFont('Helvetica', 10)
    for line in output.split('\n'):
        p.drawString(35, y, '{0}'.format(line))
        y = y - 12
    p.restoreState()
    ##p.drawString(35, y, 'Output : \n {0}'.format(output))
    ##p.restoreState()

    # Close the PDF object cleanly, and we're done.
    p.showPage()
    p.save()
    return response

# def displayoutput():
#    tf = tempfile.NamedTemporaryFile(delete=False)
#    body = """
#    <html>
#      <head>
#        <meta name="pdfkit-page-size" content="Legal"/>
#        <meta name="pdfkit-orientation" content="Landscape"/>
#      </head>
#     Hello World!
#      </html>
#    """
#    print tf.name
#    pdfkit.from_string(body, tf.name) #with --page-size=Legal and --orientation=Landscape
